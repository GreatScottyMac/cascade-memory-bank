# Cascade Memory Bank System Rules

# Initialization Protocol
session_initialization:
  trigger: "first_interaction"
  priority: "immediate"
  required: true
  actions:
    - "Initialize memory bank"
    - "Load all context"
    - "Build relationship map"
  validation:
    - "Verify memory bank exists"
    - "Confirm all core files present"
    - "Check file permissions"

# System Validation
system_validation:
  startup:
    - "Verify .windsurfrules loaded"
    - "Check memory bank accessibility"
    - "Confirm initialization complete"
  periodic:
    - "Verify context consistency"
    - "Check file system access"

mode: all
initialization_required: true  # Explicit requirement flag
initialization_timing: "immediate_after_first_contact"  # Timing specification

instructions:
  memory_bank:
    real_time_updates:
      notable_events:
        project_related:
          - Code changes to project files
          - Architecture or design decisions
          - Implementation approaches
          - Bug discoveries or fixes
          - New feature requests
          - Project scope changes
        system_related:
          - Configuration updates
          - Dependency changes
          - Performance issues
          - Security concerns
        workflow_related:
          - Task status changes
          - Blocking issues
          - Resource constraints
          - Timeline updates
        documentation_related:
          - API changes
          - Usage pattern updates
          - Breaking changes
          - Deprecation notices
      excluded_events:
        - General knowledge questions
        - Off-topic discussions
        - Temporary debugging outputs
        - Test queries unrelated to project
      actions:
        - Update relevant core files immediately
        - Cross-reference related information
        - Maintain chronological order
        - Preserve context and relationships
      priority:
        high:
          - Critical decisions
          - Blocking issues
          - Major code changes
        medium:
          - Progress updates
          - New questions
          - Minor code changes
        low:
          - Documentation improvements
          - Clarifications
          - Reference updates
    initialization:
      sequence:
        1: # Find Memory Banks
           - Use find_by_name: pattern="memory-bank/", max_depth=3
           - Store all found locations
        2: # Read Structure
           - Use list_dir on each location
           - Build file relationship map
        3: # Read ALL Files
           - Use view_file on EVERY file
           - Order: core files first, then others
           - No selective reading
        4: # Build Context
           - Process all contents
           - Create cross-reference map
           - Note missing/inconsistent items
      verification:
        - Track files found vs read
        - Verify core files present
        - Check reference completeness
      error_handling:
        - Log failed steps
        - Document unread files
        - Note context impact

    core_files:
      activeContext.md:
        purpose: "Track session state and goals"
        sections: [objectives, decisions, questions, blockers]
      productContext.md:
        purpose: "Define project scope"
        sections: [overview, components, organization, standards]
      progress.md:
        purpose: "Track work status"
        sections: [completed, current, next, issues]
      decisionLog.md:
        purpose: "Record decisions"
        sections: [technical, architecture, implementation, alternatives]

    file_handling:
      tools:
        list_dir: "Get structure and relationships"
        view_file: "Read and process contents"
        write_to_file: "Create with templates"
        replace_file_content: "Update preserving structure"
      behaviors:
        - Read ALL files at startup
        - Build complete context
        - Track dependencies
        - Note inconsistencies

  tools_and_behaviors:
    memory_bank_operations:
      tools:
        replace_file_content: "Update files"
        write_to_file: "Create files"
        view_file: "Read contents"
        list_dir: "Check structure"
        grep_search: "Find patterns"
        codebase_search: "Find code"
      behaviors:
        - Monitor project-relevant events
        - Update memory bank when appropriate
        - Cross-reference related information
        - Document with context and timestamps
        - Track system evolution
    general_operations:
      behaviors:
        - Provide accurate information
        - Maintain project context awareness
        - Filter non-project content
        - Return to project focus when appropriate

  general_rules:
    file_reading:
      - Use tools properly
      - Build full context
      - Note gaps
    context:
      - Process all files
      - Cross-reference
      - Track patterns
    completion:
      - Clear next steps
      - Note blockers
      - Suggest tasks

  memory_updates:
    write_mode:
      - Preserve structure
      - Update sections
      - Maintain links
    chat_mode:
      - Track updates in real-time
      - Log notable events immediately
      - Document context changes
      - Note issues with timestamps
      - Suggest fixes proactively

  interaction_handling:
    project_relevant:
      indicators:
        - Memory bank system changes needed
        - Implementation work required
        - Documentation updates needed
        - Configuration changes required
        - System state changes detected
      actions:
        - Update relevant memory bank files
        - Document changes and decisions
        - Maintain project context
        - Cross-reference related information
    non_project:
      indicators:
        - General knowledge questions
        - Off-topic discussions
        - Research queries unrelated to memory bank
        - Clarification of non-project topics
      actions:
        - Provide requested information
        - Do not update memory bank files
        - Maintain focus on primary task when returning to project work

  file_authority:
    write_mode:
      can: [create, update, change]
      must: [maintain consistency, update refs]
    chat_mode:
      can: [read, find, identify]
      must: [suggest, note needs]

  error_handling:
    missing_files:
      - Note impact
      - Guide creation
    inconsistencies:
      - Flag conflicts
      - Suggest fixes
    gaps:
      - Document missing
      - Prioritize updates